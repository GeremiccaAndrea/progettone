{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport * as L from 'leaflet'; // Importa Leaflet\nexport let AppComponent = class AppComponent {\n  toggleDropdown(event) {\n    event.stopPropagation(); // Evita la chiusura immediata\n    this.isDropdownOpen = !this.isDropdownOpen;\n  }\n  closeDropdown(event) {\n    const target = event.target;\n    if (!target.closest('.dropdown')) {\n      this.isDropdownOpen = false;\n    }\n  }\n  //parte inizialw del progetto di magia\n  startSearch(query) {\n    if (query) {\n      const buttonContainer = document.getElementById(\"button-container\");\n      // Nascondi input e bottone quando la ricerca è avviata\n      if (buttonContainer) {\n        buttonContainer.style.display = \"none\"; // Nascondi la zona del bottone\n      }\n      // Riattiva lo scroll una volta che la ricerca è avviata\n      document.body.style.overflow = \"auto\";\n    }\n  }\n  ngAfterViewInit() {\n    const userInput = document.getElementById(\"userInput\");\n    if (userInput) {\n      userInput.addEventListener(\"keypress\", event => {\n        if (event.key === \"Enter\") {\n          userInput.classList.add(\"fade-out\");\n          const helperText = document.getElementById(\"helperText\");\n          if (helperText) {\n            helperText.classList.add(\"fade-out\");\n          }\n          setTimeout(() => {\n            const initialContainer = document.getElementById(\"initialContainer\");\n            if (initialContainer) {\n              initialContainer.style.display = \"none\";\n            }\n            const mainContent = document.getElementById(\"mainContent\");\n            if (mainContent) {\n              mainContent.style.opacity = \"1\";\n            }\n          }, 5000);\n        }\n      });\n    }\n  }\n  constructor(crimesService, router) {\n    this.crimesService = crimesService;\n    this.router = router;\n    //menu, apritiSesamo\n    this.isDropdownOpen = false;\n  }\n  ngOnInit() {\n    this.initMap(); // Carica il file GeoJSON\n  }\n  // Funzione per inizializzare la mappa\n  initMap() {\n    this.map = L.map('map', {\n      // center: [41.816813771373916, -87.60670812560372],  // Coordinate centrali per Chicago\n      center: [45.4642, 9.19],\n      zoom: 14\n    });\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  flyToLocation(lat, lng) {\n    this.map.flyTo([lat, lng], 14); // Cambia lo zoom se necessario\n  }\n\n  searchLocation(query) {\n    if (this.geoJsonLayer != null) {\n      this.geoJsonLayer.remove();\n    }\n    this.crimesService.search(query).subscribe(location => {\n      if (location) {\n        console.log(location.name); // Controlla i dati ricevuti\n        this.loadData(location.name);\n        const lat = parseFloat(location.lat);\n        const lon = parseFloat(location.lon);\n        this.flyToLocation(lat, lon);\n      } else {\n        alert('Nessun risultato trovato!');\n      }\n    }, error => {\n      console.error('Errore durante la ricerca:', error);\n      alert('Si è verificato un errore durante la ricerca.');\n    });\n  }\n  onSwitchChange(event) {\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      console.log('chicago e milano');\n    } else {\n      console.log('mappa utenti');\n    }\n  }\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData(namecity) {\n    console.log(namecity);\n    this.crimesService.GetCity(namecity).subscribe(data => {\n      console.log(data);\n      // Assicurati che data sia un FeatureCollection\n      if (data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\n        this.geojsonData = data;\n        this.addDistrictsToMap(data);\n      } else {\n        console.error(\"Formato GeoJSON non valido\", data);\n      }\n    }, error => {\n      console.error('Errore nel recupero dei dati:', error);\n    });\n  }\n  // Funzione per determinare il colore in base al numero di crimini\n  getCrimeColor(crimeCount, data) {\n    console.log(\"inserimento colore\");\n    const maxCrimeCount = Math.max(...data.features.map(f => f.properties.numero_crimini));\n    const verde = maxCrimeCount * 0.25;\n    const giallo = maxCrimeCount * 0.75;\n    let r = 0,\n      g = 0,\n      b = 0;\n    if (crimeCount <= verde) {\n      return `rgb(0,255,0)`;\n    } else if (crimeCount <= giallo) {\n      return `rgb(255,255,0)`;\n    } else {\n      return `rgb(255,0,0)`;\n    }\n  }\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data) {\n    this.geoJsonLayer = L.geoJSON(data, {\n      style: feature => {\n        const crimeCount = feature.properties?.numero_crimini || 0;\n        const color = this.getCrimeColor(crimeCount, data); // Otteniamo il colore in base al numero di crimini\n        return {\n          color: color,\n          weight: 1,\n          opacity: 1 // Border opacity\n        };\n      },\n\n      onEachFeature: (feature, layer) => {\n        // Check for the required properties to avoid undefined errors\n        const neighborhood = feature.properties?.quartiere || \"Unknown\";\n        const crimeCount = feature.properties?.numero_crimini || 0;\n        layer.bindPopup(`\n          <strong>${neighborhood}</strong><br/>\n          Crimini: ${crimeCount}`);\n      }\n    }).addTo(this.map); // Aggiungi il layer alla mappa\n  }\n};\n\n__decorate([HostListener('document:click', ['$event'])], AppComponent.prototype, \"closeDropdown\", null);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","HostListener","L","AppComponent","toggleDropdown","event","stopPropagation","isDropdownOpen","closeDropdown","target","closest","startSearch","query","buttonContainer","document","getElementById","style","display","body","overflow","ngAfterViewInit","userInput","addEventListener","key","classList","add","helperText","setTimeout","initialContainer","mainContent","opacity","constructor","crimesService","router","ngOnInit","initMap","map","center","zoom","tileLayer","attribution","addTo","flyToLocation","lat","lng","flyTo","searchLocation","geoJsonLayer","remove","search","subscribe","location","console","log","name","loadData","parseFloat","lon","alert","error","onSwitchChange","isChecked","checked","namecity","GetCity","data","type","Array","isArray","features","geojsonData","addDistrictsToMap","getCrimeColor","crimeCount","maxCrimeCount","Math","max","f","properties","numero_crimini","verde","giallo","r","g","b","geoJSON","feature","color","weight","onEachFeature","layer","neighborhood","quartiere","bindPopup","__decorate","selector","templateUrl","styleUrls"],"sources":["/workspace/progettone/prove_mappa/src/app/app.component.ts"],"sourcesContent":["import { Component, OnInit,HostListener } from '@angular/core';\nimport { CrimesService } from './crimes.service';\nimport * as L from 'leaflet';  // Importa Leaflet\nimport { Feature, FeatureCollection } from 'geojson';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  //menu, apritiSesamo\nisDropdownOpen: boolean = false;\n\ntoggleDropdown(event: Event): void {\n    event.stopPropagation(); // Evita la chiusura immediata\n    this.isDropdownOpen = !this.isDropdownOpen;\n}\n\n@HostListener('document:click', ['$event'])\ncloseDropdown(event: Event): void {\n    const target = event.target as HTMLElement;\n    if (!target.closest('.dropdown')) {\n        this.isDropdownOpen = false;\n    }\n}\n\n\n  //parte inizialw del progetto di magia\n  startSearch(query: string): void {\n    if (query) {\n      const buttonContainer = document.getElementById(\"button-container\");\n\n      // Nascondi input e bottone quando la ricerca è avviata\n      if (buttonContainer) {\n        buttonContainer.style.display = \"none\";  // Nascondi la zona del bottone\n      }\n\n      // Riattiva lo scroll una volta che la ricerca è avviata\n      document.body.style.overflow = \"auto\";\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const userInput = document.getElementById(\"userInput\");\n    if (userInput) {\n      userInput.addEventListener(\"keypress\", (event: KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          userInput.classList.add(\"fade-out\");\n          const helperText = document.getElementById(\"helperText\");\n          if (helperText) {\n            helperText.classList.add(\"fade-out\");\n          }\n  \n          setTimeout(() => {\n            const initialContainer = document.getElementById(\"initialContainer\");\n            if (initialContainer) {\n              initialContainer.style.display = \"none\";\n            }\n            const mainContent = document.getElementById(\"mainContent\");\n            if (mainContent) {\n              mainContent.style.opacity = \"1\";\n            }\n          }, 5000);\n        }\n      });\n    }}\n  geojsonData:any; // Dati GeoJSON che contengono sia la geometria che il numero di crimini\n  geojsonDataMilano:any; \n  crimini: any;\n  formattedData: any;\n  geoJsonLayer:any;\n\n  constructor(private crimesService: CrimesService, private router: Router) { }\n\n  map!: L.Map;\n\n  ngOnInit(): void {\n    this.initMap(); // Carica il file GeoJSON\n  }\n\n  // Funzione per inizializzare la mappa\n  initMap(): void {\n    this.map = L.map('map', {\n      // center: [41.816813771373916, -87.60670812560372],  // Coordinate centrali per Chicago\n      center:[45.4642, 9.19],\n      zoom: 14\n    });\n\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  flyToLocation(lat: number, lng: number): void {\n    this.map.flyTo([lat, lng], 14); // Cambia lo zoom se necessario\n  }\n  searchLocation(query: string): void {\n    if (this.geoJsonLayer!= null){\n      this.geoJsonLayer.remove();\n    }\n    this.crimesService.search(query).subscribe(\n      location => {\n        if (location) {\n          console.log(location.name); // Controlla i dati ricevuti\n          this.loadData(location.name)\n          const lat = parseFloat(location.lat);\n          const lon = parseFloat(location.lon);\n          this.flyToLocation(lat, lon);\n        } else {\n          alert('Nessun risultato trovato!');\n        }\n      },\n      error => {\n        console.error('Errore durante la ricerca:', error);\n        alert('Si è verificato un errore durante la ricerca.');\n      }\n    );\n  }\n\n  onSwitchChange(event: Event): void {\n    const isChecked = (event.target as HTMLInputElement).checked;\n    if (isChecked) {\n      console.log('chicago e milano');\n    } else {\n      console.log('mappa utenti');\n    }\n  }\n  \n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData(namecity:string): void {\n    console.log(namecity);\n    this.crimesService.GetCity(namecity).subscribe(\n      (data) => {\n        console.log(data);\n        // Assicurati che data sia un FeatureCollection\n      if (data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\n          this.geojsonData = data;\n          this.addDistrictsToMap(data);\n        } else {\n          console.error(\"Formato GeoJSON non valido\", data);\n        }\n      },\n      (error) => {\n        console.error('Errore nel recupero dei dati:', error);\n      }\n    );\n  }\n  // Funzione per determinare il colore in base al numero di crimini\n  getCrimeColor(crimeCount: number,data: any): string {\n    console.log(\"inserimento colore\");\n    const maxCrimeCount = Math.max(...data.features.map((f: any) => f.properties.numero_crimini)); \n    const verde=maxCrimeCount*0.25;\n    const giallo=maxCrimeCount*0.75;\n    let r = 0, g = 0, b = 0;\n    if (crimeCount <= verde) {      \n      return `rgb(0,255,0)`;\n    } else if(crimeCount <= giallo){\n      return `rgb(255,255,0)`;\n    }else{\n      return `rgb(255,0,0)`;\n    }\n  }\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data: any): void {\n  \n    this.geoJsonLayer = L.geoJSON(data, {\n      style: (feature: any) => {\n        const crimeCount = feature.properties?.numero_crimini || 0;\n        const color = this.getCrimeColor(crimeCount,data); // Otteniamo il colore in base al numero di crimini\n        \n        return {\n          color: color,   // Border color\n          weight: 1,       // Border thickness\n          opacity: 1       // Border opacity\n        };\n      },\n      onEachFeature: (feature, layer) => {\n        // Check for the required properties to avoid undefined errors\n        const neighborhood = feature.properties?.quartiere || \"Unknown\";\n        const crimeCount = feature.properties?.numero_crimini || 0;\n        layer.bindPopup(`\n          <strong>${neighborhood}</strong><br/>\n          Crimini: ${crimeCount}`);\n      }\n    }).addTo(this.map); // Aggiungi il layer alla mappa\n\n\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}