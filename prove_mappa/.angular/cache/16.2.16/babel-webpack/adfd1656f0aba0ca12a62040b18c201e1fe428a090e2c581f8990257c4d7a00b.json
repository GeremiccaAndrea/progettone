{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrimesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://progettone.onrender.com/gdf';\n    this.apiClassic = 'https://progettone.onrender.com';\n  }\n  // Funzione per ottenere i crimini senza parametri\n  getCrimes() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Errore durante il recupero dei dati GeoJSON:', error);\n      throw error;\n    }));\n  }\n  // Metodo per fare la richiesta GET per un quartiere specifico\n  getCriminiByNeigh(NomeNeigh) {\n    return this.http.get(`${this.apiClassic}/criminiOnClick/${NomeNeigh}`);\n  }\n  search(query) {\n    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;\n    return;\n  }\n  searchLocation(query) {\n    this.http.get(url).subscribe(results => {\n      if (results && results.length > 0) {\n        const location = results[0]; // Prendi il primo risultato\n        const lat = parseFloat(location.lat);\n        const lon = parseFloat(location.lon);\n        this.flyToLocation(lat, lon);\n      } else {\n        alert('Nessun risultato trovato!');\n      }\n    });\n  }\n  static {\n    this.ɵfac = function CrimesService_Factory(t) {\n      return new (t || CrimesService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CrimesService,\n      factory: CrimesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","CrimesService","constructor","http","apiUrl","apiClassic","getCrimes","get","pipe","error","console","getCriminiByNeigh","NomeNeigh","search","query","url","encodeURIComponent","searchLocation","subscribe","results","length","location","lat","parseFloat","lon","flyToLocation","alert","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/workspace/progettone/prove_mappa/src/app/crimes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// Definisci il tipo di dato per i crimini\nexport interface Crime {\n  id: number;\n  type: string;\n  date: string;\n  location: string;\n  // Aggiungi altri campi pertinenti qui\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrimesService {\n  private apiUrl = 'https://progettone.onrender.com/gdf';\n  private apiClassic = 'https://progettone.onrender.com'\n\n  constructor(private http: HttpClient) { }\n\n  // Funzione per ottenere i crimini senza parametri\n  getCrimes(): Observable<any> {\n    return this.http.get<any>(this.apiUrl).pipe(\n      catchError(error => {\n        console.error('Errore durante il recupero dei dati GeoJSON:', error);\n        throw error;\n      })\n    );\n  }\n   // Metodo per fare la richiesta GET per un quartiere specifico\n   getCriminiByNeigh(NomeNeigh: string): Observable<any> {\n    return this.http.get<any>(`${this.apiClassic}/criminiOnClick/${NomeNeigh}`);\n  }\n  search(query:string){\n    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;\n    return \n  }\n  searchLocation(query: string): void {\n    \n    this.http.get<any[]>(url).subscribe(results => {\n      if (results && results.length > 0) {\n        const location = results[0]; // Prendi il primo risultato\n        const lat = parseFloat(location.lat);\n        const lon = parseFloat(location.lon);\n        this.flyToLocation(lat, lon);\n      } else {\n        alert('Nessun risultato trovato!');\n      }\n    });\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,gBAAgB;;;AAc3C,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,qCAAqC;IAC9C,KAAAC,UAAU,GAAG,iCAAiC;EAEd;EAExC;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAM,IAAI,CAACH,MAAM,CAAC,CAACI,IAAI,CACzCR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EACC;EACAE,iBAAiBA,CAACC,SAAiB;IAClC,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAM,GAAG,IAAI,CAACF,UAAU,mBAAmBO,SAAS,EAAE,CAAC;EAC7E;EACAC,MAAMA,CAACC,KAAY;IACjB,MAAMC,GAAG,GAAG,4DAA4DC,kBAAkB,CAACF,KAAK,CAAC,EAAE;IACnG;EACF;EACAG,cAAcA,CAACH,KAAa;IAE1B,IAAI,CAACX,IAAI,CAACI,GAAG,CAAQQ,GAAG,CAAC,CAACG,SAAS,CAACC,OAAO,IAAG;MAC5C,IAAIA,OAAO,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACjC,MAAMC,QAAQ,GAAGF,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAMG,GAAG,GAAGC,UAAU,CAACF,QAAQ,CAACC,GAAG,CAAC;QACpC,MAAME,GAAG,GAAGD,UAAU,CAACF,QAAQ,CAACG,GAAG,CAAC;QACpC,IAAI,CAACC,aAAa,CAACH,GAAG,EAAEE,GAAG,CAAC;OAC7B,MAAM;QACLE,KAAK,CAAC,2BAA2B,CAAC;;IAEtC,CAAC,CAAC;EACN;;;uBAnCazB,aAAa,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAb7B,aAAa;MAAA8B,OAAA,EAAb9B,aAAa,CAAA+B,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}