{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as L from 'leaflet'; // Importa Leaflet\nexport let AppComponent = class AppComponent {\n  constructor(crimesService) {\n    this.crimesService = crimesService;\n  }\n  ngOnInit() {\n    this.initMap();\n    this.loadData(); // Carica il file GeoJSON\n  }\n  // Funzione per inizializzare la mappa\n  initMap() {\n    this.map = L.map('map', {\n      center: [41.816813771373916, -87.60670812560372],\n      zoom: 14\n    });\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData() {\n    this.crimesService.getCrimes().subscribe(data => {\n      // Assicurati che data sia un FeatureCollection\n      if (data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\n        this.geojsonData = data;\n        this.addDistrictsToMap(this.geojsonData);\n      } else {\n        console.error(\"Formato GeoJSON non valido\", data);\n      }\n    }, error => {\n      console.error('Errore nel recupero dei dati:', error);\n    });\n  }\n  // Funzione per determinare il colore in base al numero di crimini\n  getCrimeColor(crimeCount) {\n    const maxCrimeCount = 62; // Numero massimo di crimini per la scala dei colori\n    const minCrimeCount = 0; // Numero minimo di crimini\n    const midCrimeCount = (maxCrimeCount - minCrimeCount) / 2; // Punto medio\n    let r = 0,\n      g = 0,\n      b = 0;\n    if (crimeCount <= midCrimeCount) {\n      // Colori dalla verde (basso) al giallo (medio)\n      const greenToYellowRatio = crimeCount / midCrimeCount;\n      g = Math.floor(255 * (1 - greenToYellowRatio)); // Decresce il verde\n      r = Math.floor(255 * greenToYellowRatio); // Aumenta il rosso\n      b = 0;\n    } else {\n      // Colori dal giallo al rosso (alto)\n      const yellowToRedRatio = (crimeCount - midCrimeCount) / (maxCrimeCount - midCrimeCount);\n      r = Math.floor(255 * yellowToRedRatio); // Aumenta il rosso\n      g = Math.floor(255 * (1 - yellowToRedRatio)); // Diminuisce il verde\n      b = 0;\n    }\n    return `rgb(${r},${g},${b})`;\n  }\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data) {\n    L.geoJSON(data, {\n      style: feature => {\n        const crimeCount = feature.properties?.crime_count || 0;\n        const color = this.getCrimeColor(crimeCount); // Otteniamo il colore in base al numero di crimini\n        return {\n          color: color,\n          weight: 2,\n          opacity: 1 // Border opacity\n        };\n      },\n\n      onEachFeature: (feature, layer) => {\n        // Check for the required properties to avoid undefined errors\n        const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\n        const crimeCount = feature.properties?.crime_count || 0;\n        layer.bindPopup(`\n          <strong>${neighborhood}</strong><br/>\n          Crimini: ${crimeCount}`);\n        layer.on('click', () => {\n          console.log(neighborhood);\n          this.crimesService.getCriminiByNeigh(neighborhood).subscribe(data => {\n            console.log(data); // Mostra i dati recuperati nella console\n            this.crimini = data; // Salva i dati dei crimini del quartiere cliccato \n            // Trasforma i dati in un array di oggetti\n            const keys = Object.keys(this.crimini.id); // Usa una delle proprietà principali per le chiavi (ad esempio \"id\")\n            this.formattedData = keys.map(key => ({\n              id: this.crimini.id[key],\n              arrest: this.crimini.arrest[key],\n              case_number: this.crimini.case_number[key],\n              date: this.crimini.date[key],\n              description: this.crimini.description[key],\n              domestic: this.crimini.domestic[key]\n            }));\n            console.log(this.formattedData);\n          });\n        });\n      }\n    }).addTo(this.map); // Aggiungi il layer alla mappa\n  }\n};\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","L","AppComponent","constructor","crimesService","ngOnInit","initMap","loadData","map","center","zoom","tileLayer","attribution","addTo","getCrimes","subscribe","data","type","Array","isArray","features","geojsonData","addDistrictsToMap","console","error","getCrimeColor","crimeCount","maxCrimeCount","minCrimeCount","midCrimeCount","r","g","b","greenToYellowRatio","Math","floor","yellowToRedRatio","geoJSON","style","feature","properties","crime_count","color","weight","opacity","onEachFeature","layer","neighborhood","pri_neigh","bindPopup","on","log","getCriminiByNeigh","crimini","keys","Object","id","formattedData","key","arrest","case_number","date","description","domestic","__decorate","selector","templateUrl","styleUrls"],"sources":["/workspace/progettone/prove_mappa/src/app/app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CrimesService } from './crimes.service';\nimport * as L from 'leaflet';  // Importa Leaflet\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  geojsonData:any; // Dati GeoJSON che contengono sia la geometria che il numero di crimini\n  crimini: any;\n  formattedData: any;\n\n  constructor(private crimesService: CrimesService) { }\n\n  map!: L.Map;\n\n  ngOnInit(): void {\n    this.initMap();\n    this.loadData(); // Carica il file GeoJSON\n  }\n\n  // Funzione per inizializzare la mappa\n  initMap(): void {\n    this.map = L.map('map', {\n      center: [41.816813771373916, -87.60670812560372],  // Coordinate centrali per Chicago\n      zoom: 14\n    });\n\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData(): void {\n    this.crimesService.getCrimes().subscribe(\n      (data) => {\n        // Assicurati che data sia un FeatureCollection\n        if (data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\n          this.geojsonData = data;\n          this.addDistrictsToMap(this.geojsonData);\n        } else {\n          console.error(\"Formato GeoJSON non valido\", data);\n        }\n      },\n      (error) => {\n        console.error('Errore nel recupero dei dati:', error);\n      }\n    );\n  }\n  // Funzione per determinare il colore in base al numero di crimini\n  getCrimeColor(crimeCount: number): string {\n    const maxCrimeCount = 62;  // Numero massimo di crimini per la scala dei colori\n    const minCrimeCount = 0;   // Numero minimo di crimini\n    const midCrimeCount = (maxCrimeCount - minCrimeCount) / 2;  // Punto medio\n\n    let r = 0, g = 0, b = 0;\n\n    if (crimeCount <= midCrimeCount) {\n      // Colori dalla verde (basso) al giallo (medio)\n      const greenToYellowRatio = crimeCount / midCrimeCount;\n      g = Math.floor(255 * (1 - greenToYellowRatio)); // Decresce il verde\n      r = Math.floor(255 * greenToYellowRatio);      // Aumenta il rosso\n      b = 0;\n    } else {\n      // Colori dal giallo al rosso (alto)\n      const yellowToRedRatio = (crimeCount - midCrimeCount) / (maxCrimeCount - midCrimeCount);\n      r = Math.floor(255 * yellowToRedRatio);  // Aumenta il rosso\n      g = Math.floor(255 * (1 - yellowToRedRatio));  // Diminuisce il verde\n      b = 0;\n    }\n\n    return `rgb(${r},${g},${b})`;\n  }\n\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data: any): void {\n    L.geoJSON(data, {\n      style: (feature: any) => {\n        const crimeCount = feature.properties?.crime_count || 0;\n        const color = this.getCrimeColor(crimeCount); // Otteniamo il colore in base al numero di crimini\n        \n        return {\n          color: color,   // Border color\n          weight: 2,       // Border thickness\n          opacity: 1       // Border opacity\n        };\n      },\n      onEachFeature: (feature, layer) => {\n        // Check for the required properties to avoid undefined errors\n        const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\n        const crimeCount = feature.properties?.crime_count || 0;\n        layer.bindPopup(`\n          <strong>${neighborhood}</strong><br/>\n          Crimini: ${crimeCount}`);\n        layer.on('click',()=>{\n          console.log(neighborhood);\n          this.crimesService.getCriminiByNeigh(neighborhood).subscribe(data => {\n            console.log(data); // Mostra i dati recuperati nella console\n            this.crimini = data; // Salva i dati dei crimini del quartiere cliccato \n            // Trasforma i dati in un array di oggetti\n            const keys = Object.keys(this.crimini.id); // Usa una delle proprietà principali per le chiavi (ad esempio \"id\")\n            this.formattedData = keys.map(key => ({\n              id: this.crimini.id[key],\n              arrest: this.crimini.arrest[key],\n              case_number: this.crimini.case_number[key],\n              date: this.crimini.date[key],\n              description: this.crimini.description[key],\n              domestic: this.crimini.domestic[key],\n            }));\n\n            console.log(this.formattedData);\n          });\n        });\n      }\n    }).addTo(this.map); // Aggiungi il layer alla mappa\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}